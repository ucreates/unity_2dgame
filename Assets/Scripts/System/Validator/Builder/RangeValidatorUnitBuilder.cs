//======================================================================
// Project Name    : hetappy bird
//
// Copyright Â© 2016 U-CREATES. All rights reserved.
//
// This source code is the property of U-CREATES.
// If such findings are accepted at any time.
// We hope the tips and helpful in developing.
//======================================================================
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      he code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using Core.Utility;
using Core.Validator.Unit;

namespace Core.Validator.Builder
{
    public sealed class RangeValidatorUnitBuilder : BaseValidatorUnitBuilder
    {
        public override string type { get; set; }

        public string min { get; set; }

        public string max { get; set; }

        public string option { get; set; }

        public RangeValidatorUnitBuilder AddType(string type)
        {
            this.type = type.ToLower();
            return this;
        }

        public RangeValidatorUnitBuilder AddMin(string min)
        {
            this.min = min.ToLower();
            return this;
        }

        public RangeValidatorUnitBuilder AddMax(string max)
        {
            this.max = max.ToLower();
            return this;
        }

        public RangeValidatorUnitBuilder AddOption(string option)
        {
            this.option = option.ToLower();
            return this;
        }

        public override object Build()
        {
            object validator = null;
            if (type.Equals("int") || type.Equals("string"))
                validator = UnitFactoryMethod<int>();
            else if (type.Equals("long"))
                validator = UnitFactoryMethod<long>();
            else if (type.Equals("float"))
                validator = UnitFactoryMethod<float>();
            else if (type.Equals("double")) validator = UnitFactoryMethod<double>();
            return validator;
        }

        protected override BaseValidatorUnit<T> UnitFactoryMethod<T>()
        {
            var validator = new RangeValidatorUnit<T>();
            validator.min = ConvertUtility.ToGenerics<T>(min);
            validator.max = ConvertUtility.ToGenerics<T>(max);
            validator.validateMessage = message;
            if (option.Equals("addequal"))
                validator.option = RangeValidatorUnit<T>.Option.AddEqual;
            else
                validator.option = RangeValidatorUnit<T>.Option.Default;
            return validator;
        }
    }
}